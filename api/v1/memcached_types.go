package v1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	corev1 "k8s.io/api/core/v1"
)

// DockerImage struct for storing image and tag for docker image
type DockerImage struct {
	Name string `json:"name"`
	Tag  string `json:"tag"`
}

type ProgressState string

const (
	DefaultPort                         = 11211
	DefaultVerboseLevel   VerboseLevel  = Enabled
	Finalizer                           = "cache.bsod.io/finalizer"
	NoFinalizerAnnotation               = "cache.bsod.io/no-finalizer"
	ProgressUpdating      ProgressState = "Updating"
	ProgressReady         ProgressState = "Ready"
	MemcachedLabel                      = "cache.bsod.io/memcached"
)

// ===============================================================================
// MemcachedSpec defines the desired state of Memcached
// +kubebuilder:pruning:PreserveUnknownFields
// +kubebuilder:validation:XPreserveUnknownFields
type MemcachedSpec struct {
	// Size defines the number of Memcached instances
	// +kubebuilder:validation:Minimum=1
	Size int32 `json:"size,omitempty"`

	// Port defines the port that will be used to init the container with the image
	ContainerPort int32 `json:"containerPort,omitempty"`

	// Specifies the verbose level.
	// Valid values are:
	// - "Disabled": no verbose output at all;
	// - "Enabled"(default): print errors and warnings;
	// - "Moar": print client commands and responses;
	// - "Extreme": print internal state transactions;
	// +optional
	Verbose VerboseLevel `json:"verbose,omitempty"`

	// Parameter for setting image and tag for memcached pod
	// default 'memcached:1.6.23-alpine'
	// +optional
	Image DockerImage `json:"image,omitempty"`

	// Resources defines CPU and memory for Memcached pods
	Resources corev1.ResourceRequirements `json:"resources,omitempty"`

	// This tells the controller to use or not Twemproxy.
	// if config is not set then it will be autogenerated generated
	// +optional
	Proxy Proxy `json:"proxy,omitempty"`
}

// VerboseLevel
// +kubebuilder:validation:Enum=Disable;Enable;Moar;Extreme
type VerboseLevel string

const (
	// Disabled no verbose output at all
	Disabled VerboseLevel = "Disabled"

	// Enabled print errors and warnings
	Enabled VerboseLevel = "Enabled"

	// Moar print client commands and responses
	Moar VerboseLevel = "Moar"

	// Extreme print internal state transactions
	Extreme VerboseLevel = "Extreme"
)

// Proxy struct for enabling and configure Twemproxy
type Proxy struct {
	// +optional
	Enable bool `json:"enable"`
	// Size defines the number of Twemproxy instances
	// +kubebuilder:validation:Minimum=1
	// +optional
	Replicas int64 `json:"replicas"`
	// +optional
	Config ProxyConfig `json:"config"`
}

// ProxyConfig struct used for describe parameters of Twemproxy
type ProxyConfig struct {
	// Listen the listening address and port (name:port or ip:port) for this server pool, default 0.0.0.0:11211
	// +optional
	Listen string `json:"listen"`
	// Hash the name of the hash function, default fnv1a_64
	// +optional
	Hash string `json:"hash"`
	// Hash the key distribution mode for choosing backend servers based on the computed hash value, default ketama
	// +optional
	Distribution string `json:"distribution"`
	// AutoEjectHosts boolean value that controls if server should be ejected temporarily when it fails consecutively server_failure_limit times, default false
	// +optional
	AutoEjectHosts bool `json:"auto_eject_hosts"`
	// number of consecutive failures on a server that would lead to it being temporarily ejected when auto_eject_hosts is set to true, default 2
	// +optional
	ServerFailureLimit int64 `json:"server_failure_limit"`
	// ServerRetryTimeout timeout value in msec to wait for before retrying on a temporarily ejected server, when auto_eject_hosts is set to true, default 30000
	// +optional
	ServerRetryTimeout int64 `json:"server_retry_timeout"`
	// Timeout value in msec that we wait for to establish a connection to the server or receive a response from a server, default 400
	// +optional
	Timeout int64 `json:"timeout"`
	// Servers list of server address, port and weight (name:port:weight or ip:port:weight), default []
	// +optional
	Servers []string `json:"servers"`
}

// ===============================================================================
// Condition
type MemcachedConditionType string

const (
	MemcachedReady       MemcachedConditionType = "Ready"
	MemcachedDegraded    MemcachedConditionType = "Degraded"
	MemcacheDecommission MemcachedConditionType = "Decommission"
	MemcachedScalingUp   MemcachedConditionType = "ScalingUp"
	MemcachedScalingDown MemcachedConditionType = "ScalingDown"
	MemcachedUpdating    MemcachedConditionType = "Updating"
)

type MemcachedCondition struct {
	Type               MemcachedConditionType `json:"type"`
	Status             corev1.ConditionStatus `json:"status"`
	Reason             string                 `json:"reason"`
	Message            string                 `json:"message"`
	LastTransitionTime metav1.Time            `json:"lastTransitionTime,omitempty"`
}

// MemcachedStatus defines the observed state of Memcached
type MemcachedStatus struct {
	// Size defines the number of Memcached instances
	Size int32 `json:"size,omitempty"`
	// Selector is the label selector used to find all pods.
	Selector string `json:"selector,omitempty"`
	// Represents the observations of a Memcached's current state.
	Conditions []MemcachedCondition `json:"conditions,omitempty"`
	// Last known progress state
	// +optional
	OperatorProgress ProgressState `json:"operatorProgress,omitempty"`
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
}

// ===============================================================================
// Memcached is the Schema for the memcacheds API
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Size",type=integer,JSONPath=`.spec.size`
// +kubebuilder:subresource:scale:specpath=.spec.size,statuspath=.status.size,selectorpath=.status.selector
type Memcached struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   MemcachedSpec   `json:"spec,omitempty"`
	Status MemcachedStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MemcachedList contains a list of Memcached
type MemcachedList struct {
	metav1.TypeMeta `            json:",inline"`
	metav1.ListMeta `            json:"metadata,omitempty"`
	Items           []Memcached `json:"items"`
}

// ===============================================================================
func init() {
	SchemeBuilder.Register(&Memcached{}, &MemcachedList{})
}

// ===============================================================================
func (m *Memcached) GetCondition(conditionType MemcachedConditionType) (MemcachedCondition, bool) {
	for _, condition := range m.Status.Conditions {
		if condition.Type == conditionType {
			return condition, true
		}
	}

	return MemcachedCondition{}, false
}

func (status *MemcachedStatus) GetConditionStatus(
	conditionType MemcachedConditionType,
) corev1.ConditionStatus {
	for _, condition := range status.Conditions {
		if condition.Type == conditionType {
			return condition.Status
		}
	}
	return corev1.ConditionUnknown
}
